<?xml version="1.0" encoding="UTF-8"?>
<project
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
   xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <modelVersion>4.0.0</modelVersion>
   <parent>
      <groupId>org.picketlink.oauth</groupId>
      <artifactId>picketlink-oauth-provider-parent</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <relativePath>../pom.xml</relativePath>
   </parent>
   <groupId>org.picketlink.oauth.provider.server</groupId>
   <artifactId>picketlink-oauth-provider-server</artifactId>
   <packaging>war</packaging>
   <version>1.0.0-SNAPSHOT</version>
   <name>picketlink-oauth-provider Server</name>
   <description>picketlink-oauth-provider server implementation</description>
   <url>http://github.com/picketlink/picketlink-oauth-provider/server</url>
   <licenses>
      <license>
         <name>Apache License, Version 2.0</name>
         <distribution>repo</distribution>
         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
      </license>
   </licenses>
   <properties>
      <!-- Explicitly declaring the source encoding eliminates the following
         message: -->
      <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
         resources, i.e. build is platform dependent! -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- Timestamp format for the maven.build.timestamp property -->
      <!-- You can reference property in pom.xml or filtered resources (must
         enable third-party plugin if using Maven < 2.1) -->
      <javaee6.spec.version>3.0.0.Beta1</javaee6.spec.version>
      <!-- Alternatively, comment out the above line, and un-comment the line
         below to use version 3.0.0.Beta1-redhat-1 which is a release certified to
         work with JBoss EAP 6. It requires you have access to the JBoss EAP 6 maven
         repository. -->
      <!-- <javaee6.spec.version>3.0.0.Beta1-redhat-1</javaee6.spec.version> -->
      <jboss.logging.version>3.1.0.GA</jboss.logging.version>
       <!-- PicketLink dependency versions -->
       <version.picketlink.javaee.bom>2.6.0.CR1</version.picketlink.javaee.bom>
   </properties>
   <dependencyManagement>
       <dependencies>
           <!-- Dependency Management for PicketLink and Java EE 6.0. -->
           <dependency>
               <groupId>org.picketlink</groupId>
               <artifactId>picketlink-javaee-6.0-with-deltaspike</artifactId>
               <version>${version.picketlink.javaee.bom}</version>
               <scope>import</scope>
               <type>pom</type>
           </dependency>
       </dependencies>
   </dependencyManagement>

   <dependencies>

       <!-- Import the PicketLink API, we deploy this as library with the application,
   and can compile against it -->
       <dependency>
           <groupId>org.picketlink</groupId>
           <artifactId>picketlink-api</artifactId>
       </dependency>

       <!-- Import the PicketLink implementation, we deploy this as library with the application,
   but can't compile against it -->
       <dependency>
           <groupId>org.picketlink</groupId>
           <artifactId>picketlink-impl</artifactId>
       </dependency>

       <!-- Import the PicketLink IDM API, we deploy this as library with the application,
   and can compile against it -->
       <dependency>
           <groupId>org.picketlink</groupId>
           <artifactId>picketlink-idm-api</artifactId>
       </dependency>

       <!-- Import the PicketLink IDM API, we deploy this as library with the application,
   and can compile against it -->
       <dependency>
           <groupId>org.picketlink</groupId>
           <artifactId>picketlink-idm-impl</artifactId>
       </dependency>

       <!-- Import the PicketLink IDM Simple Schema, which provides some built-in JPA entities for
   the sample model -->
       <dependency>
           <groupId>org.picketlink</groupId>
           <artifactId>picketlink-idm-simple-schema</artifactId>
       </dependency>

      <!-- First declare the APIs we depend on and need for compilation. All
         of them are provided by JBoss -->

      <!-- Import the CDI API, we use provided scope as the API is included in
         JBoss -->
      <dependency>
         <groupId>javax.enterprise</groupId>
         <artifactId>cdi-api</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the Common Annotations API (JSR-250), we use provided scope
         as the API is included in JBoss -->
      <dependency>
         <groupId>org.jboss.spec.javax.annotation</groupId>
         <artifactId>jboss-annotations-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the JAX-RS API, we use provided scope as the API is included
         in JBoss -->
      <dependency>
         <groupId>org.jboss.spec.javax.ws.rs</groupId>
         <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the JPA API, we use provided scope as the API is included in
         JBoss -->
      <dependency>
         <groupId>org.hibernate.javax.persistence</groupId>
         <artifactId>hibernate-jpa-2.0-api</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the EJB API, we use provided scope as the API is included in
         JBoss -->
      <dependency>
         <groupId>org.jboss.spec.javax.ejb</groupId>
         <artifactId>jboss-ejb-api_3.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- JSR-303 (Bean Validation) Implementation -->
      <!-- Provides portable constraints such as @Email -->
      <!-- Hibernate Validator is shipped in JBoss -->
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-validator</artifactId>
         <version>4.2.0.Final</version>
         <scope>provided</scope>
         <exclusions>
            <exclusion>
               <groupId>org.slf4j</groupId>
               <artifactId>slf4j-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>

      <!-- Now we declare any tools needed -->

      <!-- Annotation processor to generate the JPA 2.0 metamodel classes for
         typesafe criteria queries -->
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-jpamodelgen</artifactId>
         <version>1.1.1.Final</version>
         <scope>provided</scope>
      </dependency>

      <dependency>
         <groupId>org.jboss.logging</groupId>
         <artifactId>jboss-logging</artifactId>
         <version>${jboss.logging.version}</version>
         <scope>provided</scope>
      </dependency>

      <!-- Needed for running tests (you may also use TestNG) -->
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>4.10</version>
         <scope>test</scope>
      </dependency>

      <!-- Optional, but highly recommended -->
      <!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)
         JPA from JUnit/TestNG -->
      <dependency>
         <groupId>org.jboss.arquillian.junit</groupId>
         <artifactId>arquillian-junit-container</artifactId>
         <version>1.0.0.Final</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.jboss.arquillian.protocol</groupId>
         <artifactId>arquillian-protocol-servlet</artifactId>
         <version>1.0.0.Final</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.codehaus.jackson</groupId>
         <artifactId>jackson-jaxrs</artifactId>
         <version>1.9.2</version>
      </dependency>
      <dependency>
         <groupId>org.jboss.resteasy</groupId>
         <artifactId>resteasy-jaxrs</artifactId>
         <version>2.3.3.Final</version>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.jboss.spec.javax.servlet</groupId>
         <artifactId>jboss-servlet-api_3.0_spec</artifactId>
         <version>1.0.1.Final</version>
         <scope>provided</scope>
      </dependency>

      <dependency>
         <groupId>org.json</groupId>
         <artifactId>json</artifactId>
         <version>20090211</version>
      </dependency>

      <dependency>
         <groupId>org.openid4java</groupId>
         <artifactId>openid4java-nodeps</artifactId>
         <version>0.9.6</version>
      </dependency>
      <dependency>
         <groupId>org.picketlink</groupId>
         <artifactId>picketlink-social-standalone</artifactId>
         <version>2.0.0.2012sep25</version>
      </dependency>
      <dependency>
         <groupId>org.twitter4j</groupId>
         <artifactId>twitter4j-core</artifactId>
         <version>2.2.6</version>
      </dependency>
      <dependency>
         <groupId>org.apache.httpcomponents</groupId>
         <artifactId>httpclient</artifactId>
         <version>4.1.1</version>
      </dependency>


       <!-- Deltaspike API. We use compile scope as we need compile against its API -->
       <dependency>
           <groupId>org.apache.deltaspike.core</groupId>
           <artifactId>deltaspike-core-api</artifactId>
           <scope>compile</scope>
       </dependency>

       <!-- Deltaspike Impl. we use runtime scope as we need its implementation
   dependencies only on runtime -->
       <dependency>
           <groupId>org.apache.deltaspike.core</groupId>
           <artifactId>deltaspike-core-impl</artifactId>
           <scope>runtime</scope>
       </dependency>

       <!-- Deltaspike Security Module API. We use compile scope as we need
   to compile against its API -->
       <dependency>
           <groupId>org.apache.deltaspike.modules</groupId>
           <artifactId>deltaspike-security-module-api</artifactId>
           <scope>compile</scope>
       </dependency>

       <!-- Deltaspike Security Impl. we use runtime scope as we need its implementation
   dependencies only on runtime -->
       <dependency>
           <groupId>org.apache.deltaspike.modules</groupId>
           <artifactId>deltaspike-security-module-impl</artifactId>
           <scope>runtime</scope>
       </dependency>

   </dependencies>
   <build>
      <!-- Maven will append the version to the finalName (which is the name
         given to the generated war, and hence the context root) -->
      <finalName>${project.artifactId}</finalName>
      <plugins>
         <!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation
            processors -->
         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>2.3.1</version>
            <configuration>
               <source>1.6</source>
               <target>1.6</target>
               <debug>true</debug>
            </configuration>
         </plugin>
         <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.1.1</version>
            <configuration>
               <!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
               <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
         </plugin>
         <!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
         <!-- To use, set the JBOSS_HOME environment variable and run: mvn package
            jboss-as:deploy -->
         <plugin>
            <groupId>org.jboss.as.plugins</groupId>
            <artifactId>jboss-as-maven-plugin</artifactId>
            <version>7.1.0.Beta1b</version>
         </plugin>
      </plugins>
   </build>
   <profiles>
      <profile>
         <!-- The default profile skips all tests, though you can tune it to run
            just unit tests based on a custom pattern -->
         <!-- Seperate profiles are provided for running all tests, including Arquillian
            tests that execute in the specified container -->
         <id>default</id>
         <activation>
            <activeByDefault>true</activeByDefault>
         </activation>
         <build>
            <plugins>
               <plugin>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.4.3</version>
               </plugin>
            </plugins>
         </build>
      </profile>
      <profile>
         <!-- We add the JBoss repository as we need the JBoss AS connectors for
            Arquillian -->
         <repositories>
            <!-- The JBoss Community public repository is a composite repository
               of several major repositories -->
            <!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
            <repository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <!-- These optional flags are designed to speed up your builds by reducing
                  remote server calls -->
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </repository>
         </repositories>
         <pluginRepositories>
            <pluginRepository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </pluginRepository>
         </pluginRepositories>
         <!-- An optional Arquillian testing profile that executes tests in your
            JBoss AS instance -->
         <!-- This profile will start a new JBoss AS instance, and execute the
            test, shutting it down when done -->
         <!-- Run with: mvn clean test -Parq-jbossas-managed -->
         <id>arq-jbossas-managed</id>

      </profile>
      <profile>
         <!-- We add the JBoss repository as we need the JBoss AS connectors for
            Arquillian -->
         <repositories>
            <!-- The JBoss Community public repository is a composite repository
               of several major repositories -->
            <!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
            <repository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <!-- These optional flags are designed to speed up your builds by reducing
                  remote server calls -->
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </repository>
         </repositories>
         <pluginRepositories>
            <pluginRepository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </pluginRepository>
         </pluginRepositories>
         <!-- An optional Arquillian testing profile that executes tests in a remote
            JBoss AS instance -->
         <!-- Run with: mvn clean test -Parq-jbossas-remote -->
         <id>arq-jbossas-remote</id>

         <build>
            <plugins>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.4.3</version>
                  <configuration>
                     <includes>
                        <include>**/*IT.java</include>
                     </includes>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>
      <profile>
         <!-- When built in OpenShift the 'openshift' profile will be used when
            invoking mvn. -->
         <!-- Use this profile for any OpenShift specific customization your app
            will need. -->
         <!-- By default that is to put the resulting archive into the 'deployments'
            folder. -->
         <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
         <id>openshift</id>
         <build>
            <plugins>
               <plugin>
                  <artifactId>maven-war-plugin</artifactId>
                  <version>2.1.1</version>
                  <configuration>
                     <outputDirectory>deployments</outputDirectory>
                     <warName>ROOT</warName>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>
   </profiles>
</project>
